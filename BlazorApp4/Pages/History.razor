@page "/History"
@inject IAccountService AccountService

<!-- ===================== HISTORY PAGE ===================== -->
<h3>History</h3>

<!-- If there are no accounts yet -->
@if (_accounts == null)
{
    <p>No accounts yet!</p>
}
else
{
    <!-- Select which account's history to view -->
    <div class="mb-2">
        <label>Select account!</label>
        <InputSelect TValue="Guid"
                     class="form-select"
                     id="accountSelect"
                     @bind-Value="SelectedAccountId">
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name - Balance: @($"{account.Balance:N2} SEK")</option>
            }
        </InputSelect>
    </div>

    <!-- Sorting controls for transactions -->
    <div class="mb-2">
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            Sort: Date @(currentKey == SortKey.Date ? (descending ? "↑" : "↓") : "")
        </button>
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Amount)">
            Sort: Amount @(currentKey == SortKey.Amount ? (descending ? "↑" : "↓") : "")
        </button>
    </div>

    <!-- Display message if no transactions -->
    @if (_selectedAccount == null)
    {
        <p>No transactions yet!</p>
    }
    else
    {
        <!-- Transaction table -->
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Transaction type</th>
                    <th>Balance after</th>
                    <th>From → To</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in sortTransaction())
                {
                    <tr>
                        <td>@transaction.TimeStamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@($"{transaction.Amount:N2} SEK")</td>
                        <td>@transaction.TransactionType</td>
                        <td>@($"{transaction.BalanceAfter:N2} SEK")</td>
                        <td>
                            <!-- Display shortened From → To account IDs -->
                            @if (transaction.FromAccountId.HasValue || transaction.ToAccountId.HasValue)
                            {
                                <span>
                                    @((transaction.FromAccountId?.ToString() is string from && from.Length >= 6
                                                        ? from.Substring(0, 6) : "None"))
                                    →
                                    @((transaction.ToAccountId?.ToString() is string to && to.Length >= 6
                                                        ? to.Substring(0, 6) : "None"))
                                </span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<!-- ===================== CODE SECTION ===================== -->
@code {

    // Fields
    private List<IBankAccount> _accounts = new();
    private IBankAccount? _selectedAccount;
    private Guid _selectedAccountId;

    // Sorting
    private SortKey currentKey = SortKey.Date;
    private bool descending = true;


    // Enum to define sorting options
    private enum SortKey
    {
        Date,
        Amount
    }

    /// <summary>
    /// Handles sorting toggle logic.
    /// </summary>
    /// <param name="sortKey"></param>
    private void SetSort(SortKey sortKey)
    {
        // If the same sort key is clicked again, reverse direction
        if (currentKey == sortKey)
        {
            descending = !descending;
        }
        else
        {
            // Otherwise, change the key and set descending as default
            currentKey = sortKey;
            descending = true;
        }
    }

    // Property: Handles when user selects an account from dropdown
    private Guid SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if (_selectedAccountId == value)
                return;

            _selectedAccountId = value;
            _selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
            StateHasChanged(); // Update UI when selection changes
        }
    }

    // Lifecycle method
    // Loads accounts when the page initializes
    protected override async Task OnInitializedAsync()
    {
        await AccountService.EnsureLoadedAsync();
        _accounts = AccountService.GetAccounts();

        // If there are accounts, select the first one by default
        if (_accounts.Count > 0)
        {
            _selectedAccountId = _accounts[0].Id;
            _selectedAccount = _accounts[0];
        }
    }

    /// <summary>
    /// Returns the transaction list sorted by the aktive key.
    /// </summary>
    private IEnumerable<Transaction> sortTransaction()
    {
        if (_selectedAccount == null)
            return Enumerable.Empty<Transaction>();

        // Get transactions and apply sorting based on current key and direction
        var sortedList = _selectedAccount.Transactions.AsEnumerable();

        sortedList = currentKey switch
        {
            SortKey.Amount => (descending
                ? sortedList.OrderByDescending(t => t.Amount)
                : sortedList.OrderBy(t => t.Amount)),

            SortKey.Date => (descending
                ? sortedList.OrderByDescending(t => t.TimeStamp)
                : sortedList.OrderBy(t => t.TimeStamp)),

            _ => sortedList
        };

        return sortedList;
    }
}

