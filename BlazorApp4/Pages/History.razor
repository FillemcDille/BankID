@page "/History"
@inject IAccountService AccountService
<h3>History</h3>

@if(_accounts == null)
{
	<p>Inga konto ännu! </p>
}
else
{
	<div class="mb-2">
		<label>Välj Konto!</label>
		<InputSelect TValue="Guid"
					 class="form-select"
					 id="accountSelect"
					 @bind-Value="SelectedAccountId">
			@foreach(var account in _accounts)
			{
				<option value="@account.Id">@account.Name - Saldo: @account.Balance</option>
			}
		</InputSelect>
	</div>

	<div class="mb-2">
		<button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
			sortera: Datum @(currentKey == SortKey.Date ? (descending ? "upp" : "ned") : "")
		</button>
		<button class="btn btn-sm" @onclick="() => SetSort(SortKey.Amount)">
			sortera: Belopp @(currentKey == SortKey.Amount ? (descending ? "upp" : "ned") : "")
		</button>
	</div>
	@if (_selectedAccount == null)
	{
		<p>Inga Transation ännu!</p>
	}
	@* else if(_selectedAccount.Transactions?.Any() ?? false)
	{
		<p> inga transaktioner</p>
	} *@
	else
	{
		<table class="table table-sm">
			<thead>
				<tr>
					<th>Datum</th>
					<th>Belopp</th>
					<th>Transaktionstyp</th>
					<th>Saldo efter</th>
					<th>Från -> Till</th>
				</tr>
			</thead>
			<tbody>
				@foreach(var transaction in sortTransaction())
				{	<tr>
						<td>@transaction.TimeStamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
							<td>@transaction.Amount</td>
							<td>@transaction.TransactionType</td>
							<td>@transaction.BalanceAfter</td>
							<td>
							@if(transaction.FromAccountId.HasValue || transaction.ToAccountId.HasValue)
							{

								<span>@(transaction.FromAccountId.ToString()[..6]) -> @(transaction.ToAccountId.ToString()[..6])</span>
							}
					    </td>
					</tr>
				}
			</tbody>
		</table>
	}
}



@code {

	private List<IBankAccount> _accounts = new();
	private IBankAccount? _selectedAccount;
	private Guid _selectedAccountId; // Vilket bank konto

	//start värde för sortering
	private SortKey currentKey = SortKey.Date;
	private bool descending = true;



	private enum SortKey
	{
		Date,
		Amount
	}

	private void SetSort(SortKey sortKey)
	{
		if(currentKey == sortKey)
		{
			descending = !descending;
		}
		else
		{
			currentKey = sortKey;
			descending = true;
		}
	}

	private Guid SelectedAccountId
	{
		get => _selectedAccountId;
		set
		{
			if (_selectedAccountId == value)
				return;
			_selectedAccountId = value;
			_selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
			StateHasChanged();
		}
	}






	protected override  async Task OnInitializedAsync()
	{
		await AccountService.EnsureLoadedAsync();
		_accounts = AccountService.GetAccounts();

		//om det finns konto i vår lista, välj första för att visa i UI
		if(_accounts.Count > 0)
		{
			_selectedAccountId = _accounts[0].Id;
			_selectedAccount = _accounts[0];
		
		}

	}

	private IEnumerable<Transaction> sortTransaction()
	{
		if (_selectedAccount == null)
			return Enumerable.Empty<Transaction>();

		//sortera lista, datum belopp

		var sortedList = _selectedAccount.Transactions.AsEnumerable();
		sortedList = currentKey switch
		{
			SortKey.Amount => (descending
				? sortedList.OrderByDescending(t => t.Amount)
				: sortedList.OrderBy(t => t.Amount)),

			SortKey.Date => (descending 
				? sortedList.OrderByDescending(t => t.TimeStamp) 
				: sortedList.OrderBy(t => t.TimeStamp)),
			_=> sortedList
		};
		return sortedList;
	}
	
	
}

