@page "/transfer"
@inject IAccountService AccountService
@inject ILogger<Transfer> Logger
<!--Transfer page header-->
<h3>Transfer</h3>

@if (_accounts.Count < 2)
{
    <p>Create at least 2 accounts to make a transaction</p>
}
else
{
    <!-- ===================== TRANSFER SECTION ===================== -->
    <EditForm Model="_transferModel" OnValidSubmit="OnTransferAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Select source account -->
        <div class="mb-2">
            <label>From account</label>
            <InputSelect TValue="Guid" @bind-Value="_transferModel.FromAccountId" class="form-select" @onchange="HandleFormChanged">
                <option value="@Guid.Empty">Select account...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance @account.Currency</option>
                }
            </InputSelect>
        </div>

        <!-- Select destination account -->
        <div class="mb-2">
            <label>To account</label>
            <!-- @key forces the select to re-render when from changes -->
            <InputSelect @key="_transferModel.FromAccountId"
                TValue="Guid"
                @bind-Value="_transferModel.ToAccountId"
                class="form-select" 
                disabled="@(_transferModel.FromAccountId == Guid.Empty)">
                <option value="@Guid.Empty">Select account...</option>
                @foreach (var account in _toAccounts.Where(x => x.Id != _transferModel.FromAccountId))
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance @account.Currency</option>
                }
            </InputSelect>
        </div>

        <!-- Transfer amount -->
        <div class="mb-2">
            <label>Amount</label>
            <InputNumber TValue="decimal?" @bind-Value="_transferModel.Amount" class="form-control" />
        </div>

        <!-- Transfer button -->
        <button type="submit" class="btn btn-primary">Transfer</button>
    </EditForm>

    <!-- Display error if transfer fails -->
    @if (!string.IsNullOrEmpty(_transferError))
    {
        <div class="alert alert-danger mt-3">@_transferError</div>
    }

    <hr />

    <!-- ===================== WITHDRAW SECTION ===================== -->
    <EditForm Model="_withdrawModel" OnValidSubmit="OnWithdrawAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h4>Withdraw</h4>

        <!-- Select account -->
        <div class="mb-2">
            <label>Account</label>
            <InputSelect TValue="Guid" @bind-Value="_withdrawModel.AccountId" class="form-select">
                <option value="@Guid.Empty">Select account...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance @account.Currency</option>
                }
            </InputSelect>
        </div>

        <!-- Withdraw amount -->
        <div class="mb-2">
            <label>Amount</label>
            <InputNumber TValue="decimal?" @bind-Value="_withdrawModel.Amount" class="form-control" />
        </div>

        <!-- Withdraw button -->
        <button type="submit" class="btn btn-primary">Withdraw</button>
    </EditForm>

    <!-- Display error if withdraw fails -->
    @if (!string.IsNullOrEmpty(_withdrawError))
    {
        <div class="alert alert-danger mt-3">@_withdrawError</div>
    }

    <hr />

    <!-- ===================== DEPOSIT SECTION ===================== -->
    <EditForm Model="_depositModel" OnValidSubmit="OnDepositAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h4>Deposit</h4>

        <!-- Select account -->
        <div class="mb-2">
            <label>Account</label>
            <InputSelect TValue="Guid" @bind-Value="_depositModel.AccountId" class="form-select">
                <option value="@Guid.Empty">Select account...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance @account.Currency</option>
                }
            </InputSelect>
        </div>

        <!-- Deposit amount -->
        <div class="mb-2">
            <label>Amount</label>
            <InputNumber TValue="decimal?" @bind-Value="_depositModel.Amount" class="form-control" />
        </div>

        <!-- Deposit button -->
        <button type="submit" class="btn btn-primary">Deposit</button>
    </EditForm>

    <!-- Display error if deposit fails -->
    @if (!string.IsNullOrEmpty(_depositError))
    {
        <div class="alert alert-danger mt-3">@_depositError</div>
    }

    <!-- ===================== ACCOUNT OVERVIEW ===================== -->
    <h4 class="mt-4">Transaction Overview</h4>
    <ul>
        @foreach (var account in _accounts)
        {
            <li>
                @account.Name — Balance: @account.Balance @account.Currency — Updated: @account.LastUpdated
            </li>
        }
    </ul>
}

@code {
    // -----------------------------
    // Form models for each action
    // -----------------------------
    private readonly TransferFormModel _transferModel = new();
    private readonly WithdrawFormModel _withdrawModel = new();
    private readonly DepositFormModel _depositModel = new();

    // List of all accounts (and target accounts for transfer)
    private List<IBankAccount> _accounts = new();
    private List<IBankAccount> _toAccounts = new();

    // Error messages
    private string _withdrawError = string.Empty;
    private string _transferError = string.Empty;
    private string _depositError = string.Empty;


    // -----------------------------
    // Model classes
    // -----------------------------
    private class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal? Amount { get; set; }
    }

    private class WithdrawFormModel
    {
        public Guid AccountId { get; set; }
        public decimal? Amount { get; set; }
    }

    private class DepositFormModel
    {
        public Guid AccountId { get; set; }
        public decimal? Amount { get; set; }
    }

    // -----------------------------
    // Initialization
    // -----------------------------
    protected override void OnInitialized()
    {
        // Load all accounts when the component initializes
        _accounts = AccountService.GetAccounts();
        _toAccounts = _accounts;
    }

    // -----------------------------
    // Transfer logic
    // -----------------------------
    private async Task OnTransferAsync()
    {
        // Reset previous error messages
        _withdrawError = _depositError = _transferError = string.Empty;

        var amount = _transferModel.Amount ?? 0;
        Logger.LogInformation("Transfer submit clicked. From={from} To={To} Amount={Amount}",
        _transferModel.FromAccountId, _transferModel.ToAccountId, amount);


        // Validate basic input
        if (_transferModel.FromAccountId == Guid.Empty ||
            _transferModel.ToAccountId == Guid.Empty || amount <= 0)
        {
            Logger.LogWarning("Invalid transfer input.");
            return;
        }

        // Prevent transfer to the same account
        if (_transferModel.FromAccountId == _transferModel.ToAccountId)
        {
            _transferError = "Cannot transfer to the same account.";
            Logger.LogWarning("Transfer blocked: same account selected");
            return;
        }

        // Check balance
        var fromAccount = _accounts.FirstOrDefault(x => x.Id == _transferModel.FromAccountId);
        if (amount > fromAccount?.Balance)
        {
            _transferError = "Insufficient funds.";
            Logger.LogWarning("Insufficient funds. Available={Balance} Tried={Amount}", fromAccount?.Balance, amount);
            return;
        }
        try
        {
            await AccountService.Transfer(_transferModel.FromAccountId, _transferModel.ToAccountId, amount);
            Logger.LogInformation("Transfer completed.");
        }catch(Exception exception)
        {
            _transferError = exception.Message;
            Logger.LogError(exception, "Transfer failed.");
        }
        // Execute transfer
        
    }

    // -----------------------------
    // Withdraw logic
    // -----------------------------
    private async Task OnWithdrawAsync()
    {
        _transferError = _depositError = _withdrawError = string.Empty;
        var amount = _withdrawModel.Amount ?? 0;

        if (_withdrawModel.AccountId == Guid.Empty || amount <= 0)
        {
            _withdrawError = "Withdraw cannot be negative.";
            return;
        }

        // Check balance
        var account = _accounts.FirstOrDefault(x => x.Id == _withdrawModel.AccountId);
        if (amount > account?.Balance)
        {
            _withdrawError = "Not enough balance for withdrawal.";
            return;
        }

        // Execute withdraw and refresh account list
        await AccountService.WidrawAsync(_withdrawModel.AccountId, amount);
        _accounts = AccountService.GetAccounts();
    }

    // -----------------------------
    // Deposit logic
    // -----------------------------
    private async Task OnDepositAsync()
    {
        _withdrawError = _transferError = _depositError = string.Empty;

        var amount = _depositModel.Amount ?? 0;

        if (_depositModel.AccountId == Guid.Empty || amount <= 0)
        {
            _depositError = "Deposit cannot be negative.";
            return;
        }

        // Execute deposit and refresh account list
        await AccountService.DepositAsync(_depositModel.AccountId, amount);
        _accounts = AccountService.GetAccounts();
    }

    // -----------------------------
    // Handle change of “From account” dropdown
    // -----------------------------
    private void HandleFormChanged(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
            OnFormChanged(id);
    }

    private void OnFormChanged(Guid fromId)
    {
        // Update list of target accounts (exclude selected "from" account)
        var from = _accounts.FirstOrDefault(x => x.Id == fromId);
        _toAccounts = from != null ? _accounts.Where(a => a.Id != fromId).ToList() : _accounts;
        StateHasChanged();
    }
}
