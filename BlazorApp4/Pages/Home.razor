@page "/"
@inject IAccountService AccountService
@inject NavigationManager Nav

<PageTitle>Home</PageTitle>

<!---HomePage-->
<div class="container py-4">
    <!-- Header with app title and navigation buttons -->
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h1 class="h3 m-0">
            <i class="bi bi-bank2 me-2"></i>Bankly
        </h1>

        <div class="d-flex gap-2">
            <!-- Create Account button -->
            <button class="btn btn-success" @onclick='() => Nav.NavigateTo("createaccount")'>
                <i class="bi bi-plus-circle me-1"></i> Create account
            </button>

            <!-- Transfer button -->
            <button class="btn btn-primary" @onclick='() => Nav.NavigateTo("transfer")'>
                <i class="bi bi-arrow-left-right me-1"></i> Transfer
            </button>

            <!-- History button -->
            <button class="btn btn-outline-secondary" @onclick='() => Nav.NavigateTo("History", false)'>
                <i class="bi bi-clock-history me-1"></i> History
            </button>
        </div>
    </div>

    @* 
        If the user has no accounts yet, display an information alert.
        Otherwise, show account summaries and transaction data.
    *@
    @if (_accounts.Count == 0)
    {
        <div class="alert alert-info d-flex align-items-center" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i>
            <div>No accounts yet. Click “Create account” to get started.</div>
        </div>
    }
    else
    {
        <!-- Dashboard summary section -->
        <div class="row g-3 mb-4">
            <!-- Total balance card -->
            <div class="col-12 col-md-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="text-muted">Total balance</div>
                        <div class="h4 m-0">@($"{_totalBalance:N2} SEK")</div>
                        <small class="text-muted">Across @_accounts.Count accounts</small>
                    </div>
                </div>
            </div>

            <!-- Recent transactions card -->
            <div class="col-12 col-md-8">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="text-muted mb-2">Recent activity</div>

                        @if (_recent.Count == 0)
                        {
                            <div class="text-muted">No transactions yet.</div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm align-middle mb-0">
                                    <thead class="text-muted small">
                                        <tr>
                                            <th>Date</th>
                                            <th>Type</th>
                                            <th class="text-end">Amount</th>
                                            <th>Account</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in _recent)
                                        {
                                            <tr>
                                                <!-- Transaction date -->
                                                <td>@item.t.TimeStamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>

                                                <!-- Transaction type with colored badge -->
                                                <td>
                                                    @switch (item.t.TransactionType)
                                                    {
                                                        case TransactionType.Deposit:
                                                            <span class="badge bg-success">Deposit</span>
                                                            break;
                                                        case TransactionType.Withdraw:
                                                            <span class="badge bg-danger">Withdrawal</span>
                                                            break;
                                                        case TransactionType.TransferIn:
                                                            <span class="badge bg-info">Transfer In</span>
                                                            break;
                                                        default:
                                                            <span class="badge bg-secondary">Transfer Out</span>
                                                            break;
                                                    }
                                                </td>

                                                <!-- Amount and account name -->
                                                <td class="text-end">@($"{item.t.Amount:N2} SEK")</td>
                                                <td>@item.account.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Account list section -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <strong>Your accounts</strong>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    @foreach (var a in _accounts)
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <!-- Account header with name, type, and currency -->
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <div class="fw-semibold">@a.Name</div>
                                            <small class="text-muted">@a.AccountType</small>
                                        </div>
                                        <span class="badge text-bg-secondary">@a.Currency</span>
                                    </div>

                                    <!-- Account balance -->
                                    <div class="mt-3 h5">@($"{a.Balance:N2} {a.Currency}")</div>

                                    <!-- Last updated timestamp -->
                                    <small class="text-muted">
                                        Updated @a.LastUpdated.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    // List of all accounts loaded from the AccountService
    private List<IBankAccount> _accounts = new();

    // The total balance across all accounts
    private decimal _totalBalance;

    // A short list of recent transactions with their corresponding accounts
    private List<(Transaction t, IBankAccount account)> _recent = new();

    /// <summary>
    /// Initializes the component by loading account data and computing totals.
    /// This method runs when the component is first rendered.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Ensure that account data is loaded from the service
        await AccountService.EnsureLoadedAsync();

        // Retrieve all accounts and calculate total balance
        _accounts = AccountService.GetAccounts();
        _totalBalance = _accounts.Sum(a => a.Balance);

        // Gather the five most recent transactions across all accounts
        _recent = _accounts
            .SelectMany(a => a.Transactions.Select(t => (t, a)))
            .OrderByDescending(x => x.t.TimeStamp)
            .Take(5)
            .ToList();
    }
}
