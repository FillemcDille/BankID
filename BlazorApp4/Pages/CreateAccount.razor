@page "/createaccount"
@inject IAccountService AccountService
@using System.ComponentModel.DataAnnotations

<!--Create account form-->
<EditForm Model="_formModel" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
    <DataAnnotationsValidator />
    
    <div class="d-flex justify-content-center align-items-center flex-column mt-5 mb-4;">
        <h3>Create account</h3>

        <!--Account name-->
        <div class="mb-3">
            <label>Account name</label><br />
            <InputText @bind-Value="_formModel.Name" class="form-control" />
            <ValidationMessage For="@(() => _formModel.Name)" />
        </div>

        <!--Account type-->
        <div class="mb-3">
            <label>Account type</label><br />
            <InputSelect @bind-Value="_formModel.Type" class="form-select">
                <option value="">Select account!</option>
                <option value="@AccountType.Deposit">Basic account</option>
                <option value="@AccountType.Savings">Savings account</option>
            </InputSelect>
            <ValidationMessage For="@(() => _formModel.Type)" />
        </div>

        <!--Currency-->
        <div class="mb-3">
            <label>Currency</label><br />
            <InputSelect @bind-Value="_formModel.Currency" class="form-select">
                @foreach (var currency in Enum.GetValues<Currency>())
                {
                    <option value="@currency">@currency</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _formModel.Currency)" />
        </div>

        <!--Opening balance-->
        <div class="mb-3">
            <label>Opening balance</label><br />
            <InputNumber @bind-Value="_formModel.InitialBalance" class="form-control" />
            <ValidationMessage For="@(() => _formModel.InitialBalance)" />
        </div>

        <button type="submit" class="btn btn-success">Create</button>
    </div>
</EditForm>

<!--List of all accounts-->
<hr class="my-5" />
<h4 class="text-center">All accounts</h4>
@if (_accounts.Count == 0)
{
    <p>There are no accounts yet, register your first account!</p>
}
else
{
    <div class="row justify-content-center">
        @foreach (var account in _accounts)
        {
            <div class="card m-2 shadow-sm" style="width: 20rem;">
                <div class="card-body">
                    <h5 class="card-title">@account.Name</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@account.AccountType</h6>
                    <p class="card-text">
                        Balance: @($"{account.Balance:N2} {account.Currency}")<br />
                        <small class="text-muted">Updated @account.LastUpdated.ToLocalTime()</small>
                    </p>
                </div>
            </div>
        }
    </div>
}

<!--Code for the deisgn -->
@code {
    // Form model class
    public class CreateAccountFormModel
    {
        [Required(ErrorMessage = "Account name is mandatory")]
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public Currency Currency { get; set; }
        [Range(0, double.MaxValue, ErrorMessage = "Opening balance cannot be negative.")]
        public decimal InitialBalance { get; set; }
    }

    //Private field for models
    private CreateAccountFormModel _formModel = new();

    //Private List for IBankAccount
    private List<IBankAccount> _accounts = new();

    //Runs when the component loads, fetches all accounts
    protected override async Task OnInitializedAsync()
    {
        await AccountService.EnsureLoadedAsync();
        _accounts =  AccountService.GetAccounts();
    }

    /// <summary>
    /// Method that runs when the form is valid and submitted
    /// </summary>
    /// <returns></returns>
    private async Task CreateAccountAsync()
    {
        try
        {
            var created = await AccountService.CreateAccount(
                _formModel.Name,
                _formModel.Type,
                _formModel.Currency,
                _formModel.InitialBalance
            );
            _accounts = AccountService.GetAccounts();
            // Reset form
            _formModel = new CreateAccountFormModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
}