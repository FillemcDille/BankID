@page "/createaccount"
@inject IAccountService AccountService
@using BlazorApp4.Services
@using System.ComponentModel.DataAnnotations

<h3>Create account</h3>
<EditForm Model="_formModel" OnValidSubmit="CreateAccountAsync" FormName="CreateAccountForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- BOX for account name -->
    <div class="mb-2">
        <label>Account name</label>
        <InputText @bind-Value="_formModel.Name" />
    </div>

    <!-- BOX for account type -->
    <div class="mb-2">
        <label>Account type</label>
        <InputSelect @bind-Value="_formModel.Type">
            <option value="">Select account!</option>
            <option value="@AccountType.Deposit">Basic account</option>
            <option value="@AccountType.Savings">Savings account</option>
        </InputSelect>
    </div>

    <!-- BOX for currency -->
    <div class="mb-2">
        <label>Currency</label>
        <InputSelect @bind-Value="_formModel.Currency">
            @foreach (var currency in Enum.GetValues<Currency>())
            {
                <option value="@currency">@currency</option>
            }
        </InputSelect>
    </div>

    <!-- BOX for balance -->
    <div class="mb-2">
        <label>Opening balance</label>
        <InputNumber @bind-Value="_formModel.InitialBalance" />
    </div>

    <!-- Button for create -->
    <button type="submit">Create</button>
</EditForm>

<h4>All accounts</h4>
@if (_accounts.Count == 0)
{
    <p>There are no accounts yet, register your first account!</p>
}
else
{
    <ul>
        @foreach (var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                <small>(Uppdaterad @account.LastUpdated.ToLocalTime())</small>
            </li>
        }
    </ul>
}

<!-- Code for the deisgn -->
@code {
    // Form model class
    public class CreateAccountFormModel
    {
        [Required(ErrorMessage = "Account name is mandatory")]
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public Currency Currency { get; set; }
        public decimal InitialBalance { get; set; }
    }

    private CreateAccountFormModel _formModel = new();
    private List<IBankAccount> _accounts = new();

    protected override void OnInitialized()
    {
        _accounts =  AccountService.GetAccounts();
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            var created = await AccountService.CreateAccount(
                _formModel.Name,
                _formModel.Type,
                _formModel.Currency,
                _formModel.InitialBalance
            );
            _accounts = AccountService.GetAccounts();
            // Reset form
            _formModel = new CreateAccountFormModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
}