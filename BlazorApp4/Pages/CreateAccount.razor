@page "/CreateAccount"
@inject IAccountService AccountService
@using BlazorApp4.Services
<div class="card shadow-sm mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Skapa nytt konto</h5>
    </div>
    <div class="card-body">
        <EditForm Model="_formModel" OnValidSubmit="CreateAccountAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Kontonamn</label>
                <InputText class="form-control" @bind-Value="_formModel.Name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Kontotyp</label>
                <InputSelect class="form-select" @bind-Value="_formModel.Type">
                    <option value="">Välj kontotyp!</option>
                    <option value="@AccountType.Deposit">Baskonto</option>
                    <option value="@AccountType.Savings">Sparkonto</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Valuta</label>
                <InputSelect class="form-select" @bind-Value="_formModel.Currency">
                    @foreach (var currency in Enum.GetValues<Currency>())
                    {
                        <option value="@currency">@currency</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Startsaldo</label>
                <InputNumber class="form-control" @bind-Value="_formModel.InitialBalance" />
            </div>

            <button type="submit" class="btn btn-success">Skapa konto</button>
        </EditForm>
    </div>
</div>


<h4>Alla konton</h4>
@if (_accounts.Count == 0)
{
    <p>Det finns inga konton ännu, registera ditt första konto!</p>
}
else
{
    <ul>
        @foreach (var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                <small>(Uppdaterad @account.LastUpdated.ToLocalTime())</small>
                <button class="btn btn-danger btn-sm ms-2"@onclick="() => RemoveAccountAsync(account.Id)">Ta bort</button>
            </li>
        }
    </ul>
}

@code {
    // Form model class
    public class CreateAccountFormModel
    {
        public string Name { get; set; }
        public AccountType Type { get; set; }
        public Currency Currency { get; set; }
        public decimal InitialBalance { get; set; }
    }

    private CreateAccountFormModel _formModel = new();
    private List<IBankAccount> _accounts = new();

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            var created = await AccountService.CreateAccount(
                _formModel.Name,
                _formModel.Type,
                _formModel.Currency,
                _formModel.InitialBalance
            );
            _accounts = await AccountService.GetAccounts();
            // Reset form
            _formModel = new CreateAccountFormModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
    private async Task  RemoveAccountAsync(Guid AccountId)
    {
        await AccountService.RemoveAccountAynsc(AccountId);
        _accounts = await AccountService.GetAccounts();
        StateHasChanged();
    }
}